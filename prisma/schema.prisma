generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  sub          String         @unique
  name         String
  email        String         @unique
  picture      String?
  games        UsersOnGames[]
  startedGames Game[]
  moves        Move[]

  @@map("users")
}

model Game {
  id           Int            @id @default(autoincrement())
  letters      String
  startedAt    DateTime       @default(now())
  startedBy    User           @relation(fields: [startedBySub], references: [sub])
  startedBySub String // relation scalar field
  board        String?
  latestWord   String?
  users        UsersOnGames[]
  currentTurn  Int            @default(1)
  turns        Turn[]         @relation("turns")
  finished     Boolean        @default(false)

  @@map("games")
}

model UsersOnGames {
  user         User     @relation(fields: [userSub], references: [sub])
  userSub      String // relation scalar field
  userAccepted Boolean  @default(false)
  game         Game     @relation(fields: [gameId], references: [id])
  gameId       Int // relation scalar field
  createdAt    DateTime @default(now())

  @@id([userSub, gameId])
}

model Turn {
  id         Int      @unique @default(autoincrement())
  game       Game     @relation("turns", fields: [gameId], references: [id])
  gameId     Int // relation scalar field
  turnNumber Int
  moves      Move[]   @relation("moves")
  turnStart  DateTime @default(now())

  @@id([gameId, turnNumber])
}

model Move {
  id           Int      @id @default(autoincrement())
  turn         Turn     @relation("moves", fields: [turnId], references: [id])
  turnId       Int
  user         User     @relation(fields: [userSub], references: [sub])
  userSub      String // relation scalar field
  playedWord   String
  playedBoard  String
  playedTime   DateTime @default(now())
  playedPoints Int
  won          Boolean  @default(false)
}
